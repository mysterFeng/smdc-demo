# 点餐小程序项目 Cursor Rules

## 项目概述
这是一个基于微信小程序 + Spring Boot 的智能点餐系统项目。项目包含用户端小程序和商家端管理系统。

## 技术栈规范

### 后端技术栈
- **框架**: Spring Boot 2.6+
- **数据库**: MySQL 8.0
- **缓存**: Redis 6.0+
- **消息队列**: RabbitMQ
- **文件存储**: 阿里云OSS
- **支付**: 微信支付API
- **安全**: Spring Security + JWT

### 前端技术栈
- **框架**: 微信小程序原生开发
- **UI组件**: WeUI
- **状态管理**: 小程序原生数据绑定
- **网络请求**: wx.request API

## 代码规范

### Java 代码规范
- 遵循阿里巴巴Java开发手册
- 类名使用大驼峰命名法 (PascalCase)
- 方法名使用小驼峰命名法 (camelCase)
- 常量使用全大写加下划线 (UPPER_SNAKE_CASE)
- 包名使用小写字母，用点分隔
- 所有公共方法必须有JavaDoc注释

### 数据库规范
- 表名使用小写字母，单词间用下划线分隔 (snake_case)
- 字段名使用小写字母，单词间用下划线分隔
- 主键统一使用 `id`，类型为 `BIGINT`
- 所有表必须包含 `created_at` 和 `updated_at` 字段
- 外键字段命名格式：`表名_id`

### 小程序代码规范
- 页面文件使用小写字母，单词间用连字符分隔
- 组件名使用大驼峰命名法
- 数据属性使用小驼峰命名法
- 方法名使用小驼峰命名法

## 项目结构规范

### 后端项目结构
```
src/main/java/com/myster/demo/
├── config/           # 配置类
├── controller/       # 控制器层
├── service/         # 服务层
├── repository/      # 数据访问层
├── entity/          # 实体类
├── dto/             # 数据传输对象
├── vo/              # 视图对象
├── util/            # 工具类
├── constant/        # 常量类
├── exception/       # 异常处理
└── security/        # 安全相关
```

### 小程序项目结构
```
miniprogram/
├── pages/           # 页面文件
├── components/      # 自定义组件
├── utils/           # 工具函数
├── api/             # API接口
├── images/          # 图片资源
└── app.js           # 小程序入口文件
```

## 开发指导原则

### 1. 分层架构
- 严格遵循MVC分层架构
- Controller层只负责参数验证和结果返回
- Service层处理业务逻辑
- Repository层处理数据访问
- 层与层之间通过接口进行交互

### 2. 异常处理
- 统一使用全局异常处理器
- 自定义业务异常类
- 异常信息要详细且有意义
- 敏感信息不能暴露给前端

### 3. 数据验证
- 使用@Valid注解进行参数验证
- 自定义验证注解处理复杂验证逻辑
- 前端也要进行基础验证

### 4. 安全规范
- 所有用户输入必须进行验证和过滤
- 敏感数据必须加密存储
- 使用JWT进行身份认证
- 实现接口权限控制
- 防止SQL注入和XSS攻击

## 核心业务模块

### 用户模块
- 微信授权登录
- 用户信息管理
- 地址管理
- 手机号绑定

### 菜品模块
- 菜品分类管理
- 菜品信息管理
- 菜品上下架
- 库存管理

### 订单模块
- 订单创建
- 订单状态管理
- 订单支付
- 订单评价

### 购物车模块
- 添加/删除菜品
- 数量修改
- 价格计算

## API设计规范

### RESTful API设计
- 使用HTTP动词表示操作类型
- URL使用名词，不使用动词
- 返回合适的HTTP状态码
- 统一响应格式

### 响应格式
```json
{
  "code": 200,
  "message": "success",
  "data": {},
  "timestamp": "2024-01-01T00:00:00"
}
```

### 错误码规范
- 200: 成功
- 400: 请求参数错误
- 401: 未授权
- 403: 禁止访问
- 404: 资源不存在
- 500: 服务器内部错误

## 数据库设计规范

### 核心表结构
- users: 用户表
- dishes: 菜品表
- categories: 菜品分类表
- orders: 订单表
- order_items: 订单详情表
- addresses: 地址表
- payments: 支付记录表

### 索引设计
- 主键自动创建聚集索引
- 外键字段创建索引
- 查询频繁的字段创建索引
- 复合查询创建复合索引

## 测试规范

### 单元测试
- 核心业务逻辑必须编写单元测试
- 测试覆盖率不低于80%
- 使用JUnit 5 + Mockito
- 测试方法命名：`方法名_测试场景_期望结果`

### 集成测试
- API接口测试
- 数据库操作测试
- 第三方服务集成测试

## 性能优化

### 数据库优化
- 合理使用索引
- 避免N+1查询问题
- 使用分页查询
- 合理使用缓存

### 缓存策略
- 热点数据使用Redis缓存
- 设置合理的缓存过期时间
- 实现缓存更新策略

### 前端优化
- 图片压缩和懒加载
- 减少HTTP请求
- 使用CDN加速
- 代码压缩

## 部署规范

### 环境配置
- 开发环境：本地开发
- 测试环境：独立测试服务器
- 生产环境：云服务器

### 配置文件
- 使用application.yml格式
- 不同环境使用不同的配置文件
- 敏感信息使用环境变量

## 代码审查要点

### 功能审查
- 业务逻辑是否正确
- 异常处理是否完善
- 边界条件是否考虑

### 性能审查
- 是否有性能问题
- 数据库查询是否优化
- 缓存使用是否合理

### 安全审查
- 输入验证是否完善
- 权限控制是否正确
- 敏感信息是否保护

## 常见问题解决

### 微信小程序相关
- 登录态管理
- 支付流程处理
- 文件上传下载
- 地图功能集成

### 后端相关
- 微信支付集成
- 文件存储处理
- 消息队列使用
- 定时任务处理

## 开发工具配置

### IDE配置
- 使用统一的代码格式化配置
- 配置代码检查工具
- 设置合适的编码格式

### Git配置
- 使用Git Flow工作流
- 提交信息格式规范
- 分支命名规范

## 文档规范

### 代码注释
- 类和方法必须有注释
- 复杂逻辑必须有注释
- 注释要简洁明了

### API文档
- 使用Swagger生成API文档
- 详细描述接口参数和返回值
- 提供接口调用示例

## 监控和日志

### 日志规范
- 使用SLF4J + Logback
- 不同级别日志使用不同配置
- 敏感信息不能记录到日志

### 监控指标
- 接口响应时间
- 系统资源使用情况
- 业务指标监控

## 版本管理

### 版本号规范
- 使用语义化版本号 (Semantic Versioning)
- 格式：主版本号.次版本号.修订号
- 例如：1.0.0

### 发布流程
- 开发 -> 测试 -> 预发布 -> 生产
- 每个环境都要进行充分测试
- 回滚方案要准备充分

## 特殊注意事项

### 微信小程序限制
- 注意小程序包大小限制
- 网络请求域名需要配置
- 支付功能需要企业认证

### 支付安全
- 支付金额必须服务端验证
- 支付回调要验证签名
- 防止重复支付

### 数据安全
- 用户隐私数据加密存储
- 定期备份重要数据
- 实现数据脱敏

## 代码生成模板

### Controller模板
```java
@RestController
@RequestMapping("/api/v1/xxx")
@Slf4j
public class XxxController {
    
    @Autowired
    private XxxService xxxService;
    
    @GetMapping("/{id}")
    public Result<XxxVO> getById(@PathVariable Long id) {
        return Result.success(xxxService.getById(id));
    }
}
```

### Service模板
```java
@Service
@Slf4j
public class XxxServiceImpl implements XxxService {
    
    @Autowired
    private XxxRepository xxxRepository;
    
    @Override
    public XxxVO getById(Long id) {
        // 业务逻辑实现
    }
}
```

### Entity模板
```java
@Entity
@Table(name = "xxx")
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Xxx {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
}
```

## 代码修改
- 每次修改代码都要先在本地运行测试，确保没有问题后再提交
---

*此文件将根据项目发展持续更新和完善*
